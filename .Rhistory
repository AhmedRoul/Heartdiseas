lower_limit <- quantile(data$oldpeak, 0.25) - (1.5 * IQR)
data <- subset(data, data$oldpeak > lower_limit & data$oldpeak < upper_limit)
boxplot(data$oldpeak, main="oldpeak - after")
#############################################################
##Split Ages into Age Groups
###############################
# data$age <- cut.default(data$age, breaks = c(0, 15, 30,45,60,75,90), labels = c(0, 1,2,3,4,5))
#
# data$age<-as.numeric(as.character(data$age))
#############################################################
#scale columns
################
scaleName<-c("trestbps","chol","thalach","oldpeak")
for (i in scaleName){
data[i]=min_max_scale(data[i])
}
#############################################################
#list
typeof(data)
class(data)
cor(data)
#############################################################
############# Visual representation of feature relationships
#############################################################
# Create a heatmap of the variable correlations
###############################################
heatmap(cor(data), scale = "none")
#############################################################
#ALL corr between thalach and columns in data  negative value
#############################################################
data$thalach<-NULL
#############################################################
#summary
############
summary(data)
#############################################################
#Evaluate the best number of clustering based on data set
#############################################################
#Find the Appropriate Number of Clusters
#########################################
wss <- numeric(15)
for (i in 1:15)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
km<-kmeans(data, 4)
km
km$center
fviz_cluster(km, data, stand = FALSE, geom = "point")
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
####################################
dist_mat <- dist(data, method = 'euclidean')
fviz_dend(hclust(dist_mat), k = 4, show_labels = FALSE,
main="Hierarchical Clustering")
View(data)
boxplot(data$age, main="oldpeak - before")
#############################################################
#Install packages and loading libraries
########################################
#install.packages("factoextra")
#install.packages("pheatmap")
#install.packages("dendextend")
library("factoextra")
library(cluster)
library(graphics)
library(ggplot2)
library(pheatmap)
library(dendextend)
#############################################################
#Declaring Functions
######################
min_max_scale <- function(x) {
x=(x - min(x)) / (max(x) - min(x))
}
#############################################################
#read file
#############
data<- read.table(header = TRUE,"Heartdiseas.txt",sep=",")
#############################################################
#############         preprocessing       ###################
#############################################################
#removing unnecessary columns
###############################
data$id<-NULL
#############################################################
#print columns include null values
####################################
for (name in names(data))
{
if(sum (is.na(data[name]))>0)
{
print(name,str( sum (is.na(data[name]))))
}
}
#############################################################
# result  columns include null  int 1 [1] "slope"
#we can replace missing values by most frequent value
######################################################
most_freq <- which.max(table(data["slope"]))
data["slope"] <- replace(data["slope"], is.na(data["slope"]),most_freq )
#############################################################
boxplot(data)
boxplot(data$chol, main="chol - before")
IQR <- quantile(data$chol, 0.75) - quantile(data$chol, 0.25)
upper_limit <- quantile(data$chol, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$chol, 0.25) - (1.5 * IQR)
data <- subset(data, data$chol > lower_limit & data$chol < upper_limit)
boxplot(data$chol, main="chol - after")
#############################################################
boxplot(data$trestbps, main="trestbps - before")
IQR <- quantile(data$trestbps, 0.75) - quantile(data$trestbps, 0.25)
upper_limit <- quantile(data$trestbps, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$trestbps, 0.25) - (1.5 * IQR)
data <- subset(data, data$trestbps > lower_limit & data$trestbps < upper_limit)
boxplot(data$trestbps, main="trestbps - after")
##############################################################
boxplot(data$age, main="age - before")
#############################################################
#Install packages and loading libraries
########################################
#install.packages("factoextra")
#install.packages("pheatmap")
#install.packages("dendextend")
library("factoextra")
library(cluster)
library(graphics)
library(ggplot2)
library(pheatmap)
library(dendextend)
#############################################################
#Declaring Functions
######################
min_max_scale <- function(x) {
x=(x - min(x)) / (max(x) - min(x))
}
#############################################################
#read file
#############
data<- read.table(header = TRUE,"Heartdiseas.txt",sep=",")
#############################################################
#############         preprocessing       ###################
#############################################################
#removing unnecessary columns
###############################
data$id<-NULL
#############################################################
#print columns include null values
####################################
for (name in names(data))
{
if(sum (is.na(data[name]))>0)
{
print(name,str( sum (is.na(data[name]))))
}
}
#############################################################
# result  columns include null  int 1 [1] "slope"
#we can replace missing values by most frequent value
######################################################
most_freq <- which.max(table(data["slope"]))
data["slope"] <- replace(data["slope"], is.na(data["slope"]),most_freq )
#############################################################
boxplot(data)
boxplot(data$chol, main="chol - before")
IQR <- quantile(data$chol, 0.75) - quantile(data$chol, 0.25)
upper_limit <- quantile(data$chol, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$chol, 0.25) - (1.5 * IQR)
data <- subset(data, data$chol > lower_limit & data$chol < upper_limit)
boxplot(data$chol, main="chol - after")
#############################################################
boxplot(data$trestbps, main="trestbps - before")
IQR <- quantile(data$trestbps, 0.75) - quantile(data$trestbps, 0.25)
upper_limit <- quantile(data$trestbps, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$trestbps, 0.25) - (1.5 * IQR)
data <- subset(data, data$trestbps > lower_limit & data$trestbps < upper_limit)
boxplot(data$trestbps, main="trestbps - after")
##############################################################
boxplot(data$oldpeak, main="oldpeak - before")
IQR <- quantile(data$oldpeak, 0.75) - quantile(data$oldpeak, 0.25)
upper_limit <- quantile(data$oldpeak, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$oldpeak, 0.25) - (1.5 * IQR)
data <- subset(data, data$oldpeak > lower_limit & data$oldpeak < upper_limit)
boxplot(data$oldpeak, main="oldpeak - after")
#############################################################
##Split Ages into Age Groups
###############################
# data$age <- cut.default(data$age, breaks = c(0, 15, 30,45,60,75,90), labels = c(0, 1,2,3,4,5))
#
# data$age<-as.numeric(as.character(data$age))
#############################################################
#scale columns
################
scaleName<-c("trestbps","chol","thalach","oldpeak")
for (i in scaleName){
data[i]=min_max_scale(data[i])
}
#############################################################
#list
typeof(data)
class(data)
cor(data)
#############################################################
############# Visual representation of feature relationships
#############################################################
# Create a heatmap of the variable correlations
###############################################
heatmap(cor(data), scale = "none")
#############################################################
#ALL corr between thalach and columns in data  negative value
#############################################################
data$thalach<-NULL
#############################################################
#summary
############
summary(data)
#############################################################
#Evaluate the best number of clustering based on data set
#############################################################
#Find the Appropriate Number of Clusters
#########################################
wss <- numeric(15)
for (i in 1:15)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#############################################################
# Execute the Kmeans Model
#############################################################
km<-kmeans(data, 4)
km
km$center
fviz_cluster(km, data, stand = FALSE, geom = "point")
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
dist_mat <- dist(data, method = 'euclidean')
fviz_dend(hclust(dist_mat), k = 4, show_labels = FALSE,
main="Hierarchical Clustering")
##################################
avg = agnes(x=data, diss = FALSE, stand = TRUE, method = "average")
avgDendrogram =as.dendrogram(avg)
fviz_dend(avgDendrogram, k = 7, show_labels = FALSE,
main="Agglomerative Clustering using average")
avg = agnes(x=data, diss = FALSE, stand = TRUE, method = "average")
avgDendrogram =as.dendrogram(avg)
fviz_dend(avgDendrogram, k = 5, show_labels = FALSE,
main="Agglomerative Clustering using average")
fviz_dend(avgDendrogram, k = 4, show_labels = FALSE,
main="Agglomerative Clustering using average")
fviz_dend(avgDendrogram, k = 3, show_labels = FALSE,
main="Agglomerative Clustering using average")
fviz_dend(avgDendrogram, k = 2, show_labels = FALSE,
main="Agglomerative Clustering using average")
single = agnes(x=data, diss = FALSE, stand = TRUE, method = "single")
singleDendrogram =as.dendrogram(single)
fviz_dend(singleDendrogram, k = 7, show_labels = FALSE,
main="Agglomerative Clustering using single")
fviz_dend(singleDendrogram, k = 5, show_labels = FALSE,
main="Agglomerative Clustering using single")
fviz_dend(singleDendrogram, k = 3, show_labels = FALSE,
main="Agglomerative Clustering using single")
fviz_dend(singleDendrogram, k = 2, show_labels = FALSE,
main="Agglomerative Clustering using single")
complete = agnes(x=data, diss = FALSE, stand = TRUE, method = "complete")
completeDendrogram =as.dendrogram(complete)
fviz_dend(completeDendrogram, k = 5, show_labels = FALSE,
main="Agglomerative Clustering using complete")
dist_mat <- dist(data, method = 'euclidean')
fviz_dend(hclust(dist_mat), k = 4, show_labels = FALSE,
main="Hierarchical Clustering")
#############################################################
#Install packages and loading libraries
########################################
#install.packages("factoextra")
#install.packages("pheatmap")
#install.packages("dendextend")
library("factoextra")
library(cluster)
library(graphics)
library(ggplot2)
library(pheatmap)
library(dendextend)
#############################################################
#Declaring Functions
######################
min_max_scale <- function(x) {
x=(x - min(x)) / (max(x) - min(x))
}
#############################################################
#read file
#############
data<- read.table(header = TRUE,"Heartdiseas.txt",sep=",")
#############################################################
#############         preprocessing       ###################
#############################################################
#removing unnecessary columns
###############################
data$id<-NULL
#############################################################
#print columns include null values
####################################
for (name in names(data))
{
if(sum (is.na(data[name]))>0)
{
print(name,str( sum (is.na(data[name]))))
}
}
#############################################################
# result  columns include null  int 1 [1] "slope"
#we can replace missing values by most frequent value
######################################################
most_freq <- which.max(table(data["slope"]))
data["slope"] <- replace(data["slope"], is.na(data["slope"]),most_freq )
#############################################################
# boxplot for data Before Removing Outliers
#############################################
boxplot(data)
boxplot(data$chol, main="chol - before")
boxplot(data$trestbps, main="trestbps - before")
boxplot(data$oldpeak, main="oldpeak - before")
IQR <- quantile(data$chol, 0.75) - quantile(data$chol, 0.25)
upper_limit <- quantile(data$chol, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$chol, 0.25) - (1.5 * IQR)
data <- subset(data, data$chol > lower_limit & data$chol < upper_limit)
#############################################################
IQR <- quantile(data$trestbps, 0.75) - quantile(data$trestbps, 0.25)
upper_limit <- quantile(data$trestbps, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$trestbps, 0.25) - (1.5 * IQR)
data <- subset(data, data$trestbps > lower_limit & data$trestbps < upper_limit)
##############################################################
IQR <- quantile(data$oldpeak, 0.75) - quantile(data$oldpeak, 0.25)
upper_limit <- quantile(data$oldpeak, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$oldpeak, 0.25) - (1.5 * IQR)
data <- subset(data, data$oldpeak > lower_limit & data$oldpeak < upper_limit)
#############################################################
# boxplot for data Before Removing Outliers
#############################################
boxplot(data$chol, main="chol - after")
boxplot(data$trestbps, main="trestbps - after")
boxplot(data$oldpeak, main="oldpeak - after")
scaleName<-c("trestbps","chol","thalach","oldpeak")
for (i in scaleName){
data[i]=min_max_scale(data[i])
}
#############################################################
#list
typeof(data)
class(data)
cor(data)
#############################################################
############# Visual representation of feature relationships
#############################################################
# Create a heatmap of the variable correlations
###############################################
heatmap(cor(data), scale = "none")
data$thalach<-NULL
#############################################################
#summary
############
summary(data)
#############################################################
#Evaluate the best number of clustering based on data set
#############################################################
#Find the Appropriate Number of Clusters
#########################################
wss <- numeric(15)
for (i in 1:15)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#############################################################
km<-kmeans(data, 4)
km
km$center
fviz_cluster(km, data, stand = FALSE, geom = "point")
dist_mat <- dist(data, method = 'euclidean')
fviz_dend(hclust(dist_mat), k = 4, show_labels = FALSE,
main="Hierarchical Clustering")
avg = agnes(x=data, diss = FALSE, stand = TRUE, method = "average")
avgDendrogram =as.dendrogram(avg)
fviz_dend(avgDendrogram, k = 2, show_labels = FALSE,
main="Agglomerative Clustering using average")
single = agnes(x=data, diss = FALSE, stand = TRUE, method = "single")
singleDendrogram =as.dendrogram(single)
fviz_dend(singleDendrogram, k = 2, show_labels = FALSE,
main="Agglomerative Clustering using single")
complete = agnes(x=data, diss = FALSE, stand = TRUE, method = "complete")
completeDendrogram =as.dendrogram(complete)
fviz_dend(completeDendrogram, k = 5, show_labels = FALSE,
main="Agglomerative Clustering using complete")
complete = agnes(x=data, diss = FALSE, stand = TRUE, method = "complete")
#############################################################
#Install packages and loading libraries
########################################
#install.packages("factoextra")
#install.packages("pheatmap")
#install.packages("dendextend")
library("factoextra")
library(cluster)
library(graphics)
library(ggplot2)
library(pheatmap)
library(dendextend)
#############################################################
#Declaring Functions
######################
min_max_scale <- function(x) {
x=(x - min(x)) / (max(x) - min(x))
}
#############################################################
#read file
#############
data<- read.table(header = TRUE,"Heartdiseas.txt",sep=",")
#############################################################
#############         preprocessing       ###################
#############################################################
#removing unnecessary columns
###############################
data$id<-NULL
#############################################################
#print columns include null values
####################################
for (name in names(data))
{
if(sum (is.na(data[name]))>0)
{
print(name,str( sum (is.na(data[name]))))
}
}
#############################################################
# result  columns include null  int 1 [1] "slope"
#we can replace missing values by most frequent value
######################################################
most_freq <- which.max(table(data["slope"]))
data["slope"] <- replace(data["slope"], is.na(data["slope"]),most_freq )
#############################################################
# boxplot for data Before Removing Outliers
#############################################
boxplot(data)
boxplot(data$chol, main="chol - before")
boxplot(data$trestbps, main="trestbps - before")
boxplot(data$oldpeak, main="oldpeak - before")
#############################################################
# Removing Outliers
#######################
IQR <- quantile(data$chol, 0.75) - quantile(data$chol, 0.25)
upper_limit <- quantile(data$chol, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$chol, 0.25) - (1.5 * IQR)
data <- subset(data, data$chol > lower_limit & data$chol < upper_limit)
#############################################################
IQR <- quantile(data$trestbps, 0.75) - quantile(data$trestbps, 0.25)
upper_limit <- quantile(data$trestbps, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$trestbps, 0.25) - (1.5 * IQR)
data <- subset(data, data$trestbps > lower_limit & data$trestbps < upper_limit)
##############################################################
IQR <- quantile(data$oldpeak, 0.75) - quantile(data$oldpeak, 0.25)
upper_limit <- quantile(data$oldpeak, 0.75) + (1.5 * IQR)
lower_limit <- quantile(data$oldpeak, 0.25) - (1.5 * IQR)
data <- subset(data, data$oldpeak > lower_limit & data$oldpeak < upper_limit)
#############################################################
# boxplot for data Before Removing Outliers
#############################################
boxplot(data$chol, main="chol - after")
boxplot(data$trestbps, main="trestbps - after")
boxplot(data$oldpeak, main="oldpeak - after")
#############################################################
##Split Ages into Age Groups
###############################
# data$age <- cut.default(data$age, breaks = c(0, 15, 30,45,60,75,90), labels = c(0, 1,2,3,4,5))
#
# data$age<-as.numeric(as.character(data$age))
#############################################################
#scale columns
################
scaleName<-c("trestbps","chol","thalach","oldpeak")
for (i in scaleName){
data[i]=min_max_scale(data[i])
}
#############################################################
#list
typeof(data)
class(data)
cor(data)
#############################################################
############# Visual representation of feature relationships
#############################################################
# Create a heatmap of the variable correlations
###############################################
heatmap(cor(data), scale = "none")
#############################################################
#ALL corr between thalach and columns in data  negative value
#############################################################
data$thalach<-NULL
#############################################################
#summary
############
summary(data)
#############################################################
#Evaluate the best number of clustering based on data set
#############################################################
#Find the Appropriate Number of Clusters
#########################################
wss <- numeric(15)
for (i in 1:15)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
complete = agnes(x=data, diss = FALSE, stand = TRUE, method = "complete")
completeDendrogram =as.dendrogram(complete)
fviz_dend(completeDendrogram, k = 5, show_labels = FALSE,
main="Agglomerative Clustering using complete")
